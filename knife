_chef_dir () 
{
  # Opscode's / Chef's _chef_dir helper function:
  #
  # Recursive function that searches for chef configuration directory
  # It looks upward from the cwd until it hits /.  If no directory is found,
  # ~/.chef is chosen if it exists

  if [ "$PWD" = "/" ]; then
      if [ -d ".chef" ]; then
          echo "/.chef"
      elif [ -d "$HOME/.chef" ]; then
          echo "$HOME/.chef"
      fi
      return
  fi

  if [ -d '.chef' ];then
      echo "${PWD}/.chef"
  else
      (cd ..; _chef_dir)
  fi
}

_refresh_cache()
{
    printf "\nUpdating cache.\n" > /dev/stderr

    C_DIR=$(_chef_dir)

    NODE_UP=$(knife node list)
    if [ $? -eq 0 ]; then
        echo $NODE_UP > "$C_DIR/knife_cache/nodes"
    fi

    CLIENT_UP=$(knife client list)
    if [ $? -eq 0 ]; then
        echo $CLIENT_UP > "$C_DIR/knife_cache/clients"
    fi

    COOK_UP=$(knife cookbook list|awk '{print $1}')
    if [ $? -eq 0 ]; then
        echo $COOK_UP > "$C_DIR/knife_cache/cookbooks"
    fi

    DATABAG_UP=$(knife data bag list)
    if [ $? -eq 0 ]; then
        echo $DATABAG_UP > "$C_DIR/knife_cache/databags"
    fi

    ENVIRONMENT_UP=$(knife environment list)
    if [ $? -eq 0 ]; then
        echo $ENVIRONMENT_UP > "$C_DIR/knife_cache/environments"
    fi

    USER_UP=$(knife user list)
    if [ $? -eq 0 ]; then
        echo $USER_UP > "$C_DIR/knife_cache/users"
    fi
    
    printf "Done." > /dev/stderr
}

_check_cache_freshness()
{
    C_DIR=$(_chef_dir)
    FIVE_MIN=300

    # Wrong path? 
    if [[ ! -d $C_DIR ]];then
        printf "\nError - No Chef directory found!\n"
        return 1
    fi

    # First run? 
    if [ ! -d $C_DIR/knife_cache/ ]; then
        mkdir -p "$C_DIR/knife_cache/"
        _refresh_cache
    fi

    NOW=$(date +%s)
    REF=$(stat -c%Z $C_DIR/knife_cache/nodes)

    OFFSET=$(($NOW - $REF))
    if [ $OFFSET -gt $FIVE_MIN ]; then
        _refresh_cache
    fi

    touch "$C_DIR/knife_cache/nodes"
}

get_nodelist()
{
    C_DIR=$(_chef_dir)
    _check_cache_freshness
    NODE_LIST=$(cat "$C_DIR/knife_cache/nodes")
}

get_cookbooklist()
{
    C_DIR=$(_chef_dir)
    _check_cache_freshness
    COOKBOOK_LIST=$(cat "$C_DIR/knife_cache/cookbooks")
}

get_clientlist()
{
    C_DIR=$(_chef_dir)
    _check_cache_freshness
    CLIENT_LIST=$(cat "$C_DIR/knife_cache/clients")
}

get_environmentlist()
{
    C_DIR=$(_chef_dir)
    _check_cache_freshness
    ENVIRONMENT_LIST=$(cat "$C_DIR/knife_cache/environments")
}

get_userlist()
{
    C_DIR=$(_chef_dir)
    _check_cache_freshness
    USER_LIST=$(cat "$C_DIR/knife_cache/users")
}

_knife()
{
    local cur prev completions

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}
    cword1=${COMP_WORDS[1]}
    cword2=${COMP_WORDS[2]}

    COMMANDS='bootstrap client configure converge cookbook data delete\
              deps diff download edit environment exec help index\ 
              list node raw recipe role search show ssh ssl status tag\
              upload user xargs'

    HELP_TOPICS='bootstrap chef-shell client configure cookbook cookbook-site\
                 data-bag delete deps diff download edit environment exec\
                 index-rebuild knife node raw recipe-list role search\
                 show ssh status tag upload user xargs'

    BOOTSTRAP_OPT='\
      -i --identity-file\
      -N --node-name\
      -x --ssh-user\
      -P --ssh-password\
      -p --ssh-port\
      --bootstrap-version\
      --bootstrap-proxy\
      --prerelease\
      -r --run-list\
      --template-file\
      --sudo\
      -d --distro\
      --no-host-key-verify\
      --host-key-verify\
      --hint'

    CLIENT_OPT='\
      show\
      create\
      delete\
      edit\
      list\
      reregister\
      bulk'

    CONFIGURE_OPT='\
      -i --initial\
      -r --repository\'

    COOKBOOK_OPT='\
      bulk\
      create\
      delete\
      download\
      list\
      metadata\
      show\
      test\
      upload\'    

    DATA_OPT='bag'

    DATABAG_OPT='\
      create\
      delete\
      edit\
      from\
      list\
      show\'

    ENVIRONMENT_OPT='\
      compare\
      create\
      delete\
      edit\
      from\
      list\
      show\'

    NODE_OPT='\
       bulk\
       create\
       delete\
       edit\
       from\
       list\
       run_list\
       show\'

    RUNLIST_OPT='\
       add\
       remove\
       set\' 

    ROLE_OPT='\
       bulk\
       create\
       delete\
       edit\
       from\
       list\
       show\'

    SSL_OPT='\
       check\
       fetch\'
    
    TAG_OPT='\
       create\
       delete\
       list\'

    USER_OPT='\
       create\
       delete\
       edit\
       list\
       reregister\
       show\'

    case "${prev}" in
      bootstrap)
        completions=""
        ;;
      bulk)
        completions="delete"
        ;; 
      client)
        completions="$CLIENT_OPT"
        ;;
      configure)
        completions="$CONFIGURE_OPT"
        ;;
      cookbook)
        completions="$COOKBOOK_OPT"
        ;;
      data)
        completions="$DATA_OPT"
        ;;
      bag)
        completions="$DATABAG_OPT"
        ;;
      environment)
        completions="$ENVIRONMENT_OPT"
        ;;
      index)
        completions="rebuild"
        ;; 
      node)
        completions="$NODE_OPT"
        ;;
      recipe)
        completions="list"
        ;; 
      role)
        completions="$ROLE_OPT"
        ;; 
      run_list)
        completions="$RUNLIST_OPT"
        ;;
      ssl)
        completions="$SSL_OPT"
        ;;
      tag)
        completions="$TAG_OPT"
        ;;
      user)
        completions="$USER_OPT"
        ;;
      from)
        completions="file"
        ;;
      help)
        completions="$HELP_TOPICS"
        ;; 
      knife)
        completions="$COMMANDS"
        ;;
      *)
        completions=""
        ;;
    esac

    case "${cword1}" in
        bootstrap)
        if [[ "${cword2}" != "" ]]; then
            completions="$BOOTSTRAP_OPT"
        fi
        ;;
        node)
        case "${cword2}" in
        node|show|edit|delete)
        get_nodelist
        completions='$NODE_LIST'
        esac
        ;;
        cookbook)
        case "${cword2}" in
        show|metadata|download|delete)
        get_cookbooklist
        completions='$COOKBOOK_LIST'
        esac
        ;;
        client)
        case "${cword2}" in
        show|edit|delete)
        get_clientlist
        completions='$CLIENT_LIST'
        esac
        ;;
        environment)
        case "${cword2}" in
        show|edit|delete)
        get_environmentlist
        completions='$ENVIRONMENT_LIST'
        esac
        ;;
        tag)
        case "${cword2}" in
        create|delete|list)
        get_nodelist
        completions='$NODE_LIST'
        esac
        ;;
        user)
        case "${cword2}" in
        show|reregister|edit|delete)
        get_userlist
        completions='$USER_LIST'
        esac
        ;;
    esac

    COMPREPLY=($(compgen -W "$completions" -- $cur))
    return 0
}

complete -o bashdefault -o default -F _knife knife

